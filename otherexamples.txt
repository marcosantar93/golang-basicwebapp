
/*
import (
	"fmt"
)

func add(x, y float32) float32 {
	return x+y
}

func multiple(a,b string) (string, string)  {
	return a,b
}
func main() {
	//num1,num2 := 5.5, 9.9

	var a int = 55
	var b float64 = float64(a)

	w1, w2 := "Hey there", "General Kenobi"

	fmt.Println(multiple(w1,w2))
	fmt.Println(b)
}
*/ /*
func main()  {
	x := 15
	a := &x
	fmt.Println(x, a)
	*a = 5
	fmt.Println(x, a)
	*a = *a**a
	fmt.Println(x, a)


}
*/
/*package main

import "fmt"

const usixteenbitmax float64 = 65535
const kmh_multiple float64 = 1.60934

type car struct{
	gasPedal uint16
	brakePedal uint16
	steeringWheel int16
	topSpeedKmh float64
}

func (c car) kmh() float64{
	return float64(c.gasPedal) * (c.topSpeedKmh / usixteenbitmax)
}

func (c car) mph() float64{
	return float64(c.gasPedal) * (c.topSpeedKmh / usixteenbitmax) / kmh_multiple
}

func (c *car) newTopSpeed(newSpeed float64){
	c.topSpeedKmh = newSpeed
}

func newerTopSpeed(c car, speed float64) car {
	c.topSpeedKmh = speed
	return c
}

func main(){
	//aCar := car{0,0,0,250.0}
	aCar := car{gasPedal: 21651,
		brakePedal: 0,
		steeringWheel: 0,
		topSpeedKmh: 250.0,
	}
	fmt.Println(aCar.gasPedal)
	fmt.Println(aCar.kmh())
	fmt.Println(aCar.mph())
	//aCar.newTopSpeed(500)
	aCar = newerTopSpeed(aCar, 300)
	fmt.Println(aCar.kmh())
	fmt.Println(aCar.mph())
//	var nombre string
//	fmt.Println("Como te llamas?")
//	fmt.Scanf("%s",&nombre)
//	fmt.Println("Hola", nombre)

}
*/
/*package main

import (
    "fmt"
    "sync"
)

var wg sync.WaitGroup

func foo(c chan int, someValue int) {
    defer wg.Done()
    c <- someValue * 5
}

func main() {
    fooVal := make(chan int, 10)
    for i := 0; i < 10; i++ {
        wg.Add(1)
        go foo(fooVal, i)
    }
    wg.Wait()
    close(fooVal)
    for item := range fooVal {
        fmt.Println(item)
    }
}*/